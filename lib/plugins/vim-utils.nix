# tests available at pkgs/test/vim
{ lib
, stdenv
, vim
, vimPlugins
, vim_configurable
, buildEnv
, writeText
, runCommand
, makeWrapper
, nix-prefetch-hg
, nix-prefetch-git
, fetchFromGitHub
, runtimeShell
, hasLuaModule
, python3
, callPackage
, makeSetupHook
}:


let
  inherit lib;

  # make sure a plugin is a derivation and its dependencies are derivations. If
  # plugin already is a derivation, this is a no-op. If it is a string, it is
  # looked up in knownPlugins.
  pluginToDrv = knownPlugins: plugin:
    let
      drv =
        if builtins.isString plugin then
        # make sure `pname` is set to that we are able to convert the derivation
        # back to a string.
          (knownPlugins.${plugin} // { pname = plugin; })
        else
          plugin;
    in
    # make sure all the dependencies of the plugin are also derivations
    drv // { dependencies = map (pluginToDrv knownPlugins) (drv.dependencies or [ ]); };

  # transitive closure of plugin dependencies (plugin needs to be a derivation)
  transitiveClosure = plugin:
    [ plugin ] ++ (
      lib.unique (builtins.concatLists (map transitiveClosure plugin.dependencies or [ ]))
    );

  findDependenciesRecursively = plugins: lib.concatMap transitiveClosure plugins;

  rtpPath = ".";

  # Generates a packpath folder as expected by vim
  packDir = packages:
    let
      # dir is "start" or "opt"
      linkLuaPlugin = plugin: packageName: dir: ''
        mkdir -p $out/pack/${packageName}/${dir}/${plugin.pname}/lua
        ln -sf ${plugin}/share/lua/5.1/* $out/pack/${packageName}/${dir}/${plugin.pname}/lua
        ln -sf ${plugin}/${plugin.pname}-${plugin.version}-rocks/${plugin.pname}/${plugin.version}/* $out/pack/${packageName}/${dir}/${plugin.pname}/
      '';

      linkVimlPlugin = plugin: packageName: dir: ''
        mkdir -p $out/pack/${packageName}/${dir}
        if test -e "$out/pack/${packageName}/${dir}/${lib.getName plugin}"; then
          printf "\nERROR - Duplicated vim plugin: ${lib.getName plugin}\n\n"
          exit 1
        fi
        ln -sf ${plugin}/${rtpPath} $out/pack/${packageName}/${dir}/${lib.getName plugin}
      '';


      packageLinks = packageName: { start ? [ ], opt ? [ ] }:
        let
          # `nativeImpl` expects packages to be derivations, not strings (as
          # opposed to older implementations that have to maintain backwards
          # compatibility). Therefore we don't need to deal with "knownPlugins"
          # and can simply pass `null`.
          depsOfOptionalPlugins = lib.subtractLists opt (findDependenciesRecursively opt);
          startWithDeps = findDependenciesRecursively start;
          allPlugins = lib.unique (startWithDeps ++ depsOfOptionalPlugins);
          python3Env = python3.withPackages (ps:
            lib.flatten (builtins.map (plugin: (plugin.python3Dependencies or (_: [ ])) ps) allPlugins)
          );
        in
        [ "mkdir -p $out/pack/${packageName}/start" ]
        # To avoid confusion, even dependencies of optional plugins are added
        # to `start` (except if they are explicitly listed as optional plugins).
        ++ (builtins.map (x: linkVimlPlugin x packageName "start") allPlugins)
        ++ [ "mkdir -p $out/pack/${packageName}/opt" ]
        ++ (builtins.map (x: linkVimlPlugin x packageName "opt") opt)
        # Assemble all python3 dependencies into a single `site-packages` to avoid doing recursive dependency collection
        # for each plugin.
        # This directory is only for python import search path, and will not slow down the startup time.
        ++ [
          "mkdir -p $out/pack/${packageName}/start/__python3_dependencies"
          "ln -s ${python3Env}/${python3Env.sitePackages} $out/pack/${packageName}/start/__python3_dependencies/python3"
        ];
    in
    stdenv.mkDerivation {
      name = "vim-pack-dir";
      src = ./.;
      installPhase = lib.concatStringsSep "\n" (lib.flatten (lib.mapAttrsToList packageLinks packages));
      preferLocalBuild = true;
    };

  nativeImpl = {
    vim = packages:
      ''
        set packpath^=${packDir packages}
        set runtimepath^=${packDir packages}
      '';
    lua = packages:
      '' 
        vim.opt.packpath:append('${packDir packages}')
        vim.opt.runtimepath:append('${packDir packages}')
      '';
  };

  /* Generates a vimrc string

    packages is an attrset with {name: { start = [ vim derivations ]; opt = [ vim derivations ]; }
    Example:
    vimrcContent {

    packages = { home-manager = { start = [vimPlugins.vim-fugitive]; opt = [];};
    beforePlugins = '';
    customRC = ''let mapleader = " "'';

    };
  */
  vimrcContent.Vim =
    { packages ? null
    , beforePlugins ? ''
        " configuration generated by NIX
        set nocompatible
      ''
    , customRC ? null
    }:

    let
            entries = [
        beforePlugins
      ]
      ++ lib.optional (packages != null && packages != [ ]) (nativeImpl.vim packages)
      # ++ lib.optional (plug != null) plugImpl
      ++ [ customRC ];

    in
    lib.concatStringsSep "\n" (lib.filter (x: x != null && x != "") entries);


  /* Generates a vimrc string

    packages is an attrset with {name: { start = [ vim derivations ]; opt = [ vim derivations ]; }
    Example:
    vimrcContent {

    packages = { home-manager = { start = [vimPlugins.vim-fugitive]; opt = [];};
    beforePlugins = '';
    customRC = ''let mapleader = " "'';

    };
  */
  vimrcContent.Lua =
    { packages ? null
    , beforePlugins ? ''
        -- configuration generated by NIX
      ''
    , customRC ? null
    }:

    let

      entries = [
        beforePlugins
      ]
      ++ lib.optional (packages != null && packages != [ ]) (nativeImpl.lua packages)
      # ++ lib.optional (plug != null) plugImpl
      ++ [ customRC ];

    in
    lib.concatStringsSep "\n" (lib.filter (x: x != null && x != "") entries);

in

rec {
  inherit vimrcContent;
  inherit packDir;

  vimGenDocHook = callPackage
    ({ vim }:
      makeSetupHook
        {
          name = "vim-gen-doc-hook";
          deps = [ vim ];
          substitutions = {
            vimBinary = "${vim}/bin/vim";
            inherit rtpPath;
          };
        } ./vim-gen-doc-hook.sh)
    { };

  vimCommandCheckHook = callPackage
    ({ neovim-lua-unwrapped }:
      makeSetupHook
        {
          name = "vim-command-check-hook";
          deps = [ neovim-lua-unwrapped ];
          substitutions = {
            vimBinary = "${neovim-lua-unwrapped}/bin/nvim";
            inherit rtpPath;
          };
        } ./vim-command-check-hook.sh)
    { };

  neovimRequireCheckHook = callPackage
    ({ neovim-lua-unwrapped }:
      makeSetupHook
        {
          name = "neovim-require-check-hook";
          deps = [ neovim-lua-unwrapped ];
          substitutions = {
            nvimBinary = "${neovim-lua-unwrapped}/bin/nvim";
            inherit rtpPath;
          };
        } ./neovim-require-check-hook.sh)
    { };

  inherit (import ./build-vim-plugin.nix {
    inherit lib stdenv rtpPath vim vimGenDocHook
      toVimPlugin vimCommandCheckHook neovimRequireCheckHook;
  }) buildVimPlugin buildVimPluginFrom2Nix;


  # used to figure out which python dependencies etc. neovim needs
  requiredPlugins =
    { packages ? { }
    , givenKnownPlugins ? null
    , ...
    }:
    let
      # This is probably overcomplicated, but I don't understand this well enough to know what's necessary.
      knownPlugins = if givenKnownPlugins != null then givenKnownPlugins else vimPlugins;
      nativePluginsConfigs = lib.attrsets.attrValues packages;
      nativePlugins = lib.concatMap ({ start ? [ ], opt ? [ ], knownPlugins ? vimPlugins }: start ++ opt) nativePluginsConfigs;
    in
    nativePlugins;

  toVimPlugin = drv:
    drv.overrideAttrs (oldAttrs: {
      # dont move the "doc" folder since vim expects it
      forceShare = [ "man" "info" ];

      nativeBuildInputs = oldAttrs.nativeBuildInputs or [ ]
        ++ lib.optionals (stdenv.hostPlatform == stdenv.buildPlatform) [
        vimCommandCheckHook
        vimGenDocHook
        # many neovim plugins keep using buildVimPlugin
        neovimRequireCheckHook
      ];

      passthru = (oldAttrs.passthru or { }) // {
        vimPlugin = true;
      };
    });
}
